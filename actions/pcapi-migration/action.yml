name: 'pcapi-pre-migration'
description: 'This composite action executes pre-migration on a given pcapi environment'
inputs:
  environment:
    required: true
    description: pcapi environment to target
  app_version:
    required: true
    description: pcapi image version
  migration_type:
    required: true
    description: "pre for pre-migrations and post for post-migrations"
runs:
  using: 'composite'
  steps:
    - name: "Play pre-migrations"
      if: inputs.migration_type == 'pre'
      shell: bash
      run: |
        set -e
        VERSION="${{ inputs.app_version }}"
        export ENVIRONMENT="${{ inputs.environment }}"
        IMAGE="europe-west1-docker.pkg.dev/passculture-infra-prod/pass-culture-artifact-registry/pcapi"
        export IMAGE="${IMAGE}:${VERSION}"
        export DATE=$(date +"%Y-%m-%d--%H-%M-%S")
        JOB_NAME=pre-upgrade-${DATE}
        envsubst < ${{ github.action_path }}/pre-upgrade-job.yaml | kubectl -n ${{ inputs.environment }} apply -f -
        # kubectl logs returns 0 if pod is pending because of lack of resource so we use a more elaborate condition
        kubectl wait -n ${{ inputs.environment }} --for=jsonpath='{.status.ready}'=1 jobs/${JOB_NAME} --timeout=180s
        # Next lines assume that job's backoffLimit is 0
        kubectl logs -n ${{ inputs.environment }} -f jobs/${JOB_NAME}
        kubectl wait -n ${{ inputs.environment }} --for=condition=complete jobs/${JOB_NAME} || kubectl wait -n ${{ inputs.environment }} --for=condition=failed jobs/${JOB_NAME} # Sanity check that the job is over
        failure=$(kubectl get -n ${{ inputs.environment }} jobs/${JOB_NAME} -o=jsonpath='{.status.conditions[?(@.type=="Failed")].status}') # Did the job fail or not so we can give correct return code
        if [[ "$failure" == "True" ]]
        then
          exit 1
        else
          exit 0
        fi

    - name: "Play post-migrations"
      if: inputs.migration_type == 'post'
      shell: bash
      run: |
        set -e
        VERSION="${{ inputs.app_version }}"
        export ENVIRONMENT="${{ inputs.environment }}"
        IMAGE="europe-west1-docker.pkg.dev/passculture-infra-prod/pass-culture-artifact-registry/pcapi"
        export IMAGE="${IMAGE}:${VERSION}"
        export DATE=$(date +"%Y-%m-%d--%H-%M-%S")
        JOB_NAME=post-upgrade-${DATE}
        envsubst < ${{github.action_path }}/post-upgrade-job.yaml | kubectl -n ${{ inputs.environment }} apply -f -
        # kubectl logs returns 0 if pod is pending because of lack of resource so we use a more elaborate condition
        kubectl wait -n ${{ inputs.environment }} --for=jsonpath='{.status.ready}'=1 jobs/${JOB_NAME} --timeout=180s
        # Next lines assume that job's backoffLimit is 0
        kubectl logs -n ${{ inputs.environment }} -f jobs/${JOB_NAME}
        kubectl wait -n ${{ inputs.environment }} --for=condition=complete jobs/${JOB_NAME} || kubectl wait -n ${{ inputs.environment }} --for=condition=failed jobs/${JOB_NAME} # Sanity check that the job is over
        failure=$(kubectl get -n ${{ inputs.environment }} jobs/${JOB_NAME} -o=jsonpath='{.status.conditions[?(@.type=="Failed")].status}') # Did the job fail or not so we can give correct return code
        if [[ "$failure" == "True" ]]
        then
          exit 1
        else
          exit 0
        fi

