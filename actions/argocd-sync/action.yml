name: 'Sync argocd application'
description: 'This composite action connects will sync current application in ArgoCD and wait for sync to be ok'
inputs:
  app_name:
    type: string
    description: The application to sync on ArgoCD
    required: true
  sync_timeout:
    description: The timeout to wait for before aborting the sync
    required: false
    default: 600
  retry_backoff_duration:
    description: Retry backoff base duration.
    required: false
    default: '5s'
  retry_backoff_factor:
    description: Factor multiplies the base duration after each failed retry
    required: false
    default: 1
  retry_backoff_max_duration:
    description: Max retry backoff duration.
    required: false
    default: '1m'
  argocd_app_wait:
    description: Whether or not to execute argocd app wait
    required: false
    default: false
  prune:
    description: Wether or not to use argocd prune option
    required: false
    default: false

runs:
  using: 'composite'
  steps:
    - name: "Install argocd cli"
      id: install_argocd_cli
      shell: bash
      run: |
        curl -sSL -o argocd-linux-amd64 https://github.com/argoproj/argo-cd/releases/latest/download/argocd-linux-amd64
        sudo install -m 555 argocd-linux-amd64 /usr/local/bin/argocd
        rm argocd-linux-amd64

    - name: "Check argocd application status"
      id: check_status
      shell: bash
      run: |
        kubectl config set-context --current --namespace=argocd
        argocd app sync ${{ inputs.app_name }} \
          --core \
          --apply-out-of-sync-only \
          --retry-backoff-duration ${{ inputs.retry_backoff_duration }} \
          --retry-backoff-factor ${{ inputs.retry_backoff_factor }} \
          --retry-backoff-max-duration ${{ inputs.retry_backoff_max_duration }} \
          if [ ${{ inputs.prune }} == 'true' ]; then
          --prune \
          fi
          --timeout ${{ inputs.sync_timeout }}

        if [ ${{ inputs.argocd_app_wait }} == 'true' ]; then
          argocd app wait ${{ inputs.app_name }} --core
        fi
