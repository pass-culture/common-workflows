name: 'Build docker image'
description: 'This composite action connects will build and sign docker images'
inputs:
  image:
    description: image name
    required: true
  push:
    description: push the image after building
    default: "false"
  context:
    description: context to build the dockerfile in
    default: "."
    required: false
  cosign_kms_key:
    description: kms key used to sign
    required: true
  gcp_workload_identity_provider:
    description: workload identity provider
    required: true
  artifact_registry_service_account:
    description: service account to use
    required: true
  docker_registry_project_id: 
    description: project id for artifact registry
    default: passculture-infra-prod
    required: false
  docker_registry_region: 
    description: region for aritfact registry
    default: europe-west1
    required: false
  docker_registry_repository:
    description: repository for artifact registry
    default: pass-culture-artifact-registry
    required: false

runs:
  using: 'composite'
  steps:
  - name: Checkout ref
    uses: actions/checkout@v4

  - name: Set up Docker Buildx
    uses: docker/setup-buildx-action@v2.2.1
    with:
      driver: docker

  - name: Output variables
    shell: bash
    id: vars
    run: echo "DOCKER_REPO=${{ inputs.docker_registry_region }}-docker.pkg.dev/${{ inputs.docker_registry_project_id }}/${{ inputs.docker_registry_repository }}" | tee -a ${GITHUB_ENV}

  - id: openid-auth
    name: "OpenID Connect Authentication"
    uses: "google-github-actions/auth@v2"
    with:
      create_credentials_file: true
      token_format: "access_token"
      workload_identity_provider: ${{ inputs.gcp_workload_identity_provider }}
      service_account: ${{ inputs.artifact_registry_service_account }}

  - id: docker-login
    uses: docker/login-action@v3.0.0
    name: "Docker login"
    with:
      registry: "${{ inputs.docker_registry_region }}-docker.pkg.dev"
      username: "oauth2accesstoken"
      password: "${{ steps.openid-auth.outputs.access_token }}"

  - name: Install Cosign
    uses: sigstore/cosign-installer@v3.5.0

  # Convert / in branch name to -
  - name: Sanitze branch name
    id: sanitize-branch-name
    shell: bash
    run: |
      BRANCH_NAME="${{ github.event_name == 'pull_request' && github.head_ref || github.ref_name }}"
      echo "SANITIZED_BRANCH_NAME=${BRANCH_NAME//\//-}" | tee -a ${GITHUB_ENV}

  - name: Get commit hash
    id: get-commit-hash
    shell: bash
    run: |
      HASH="${{ github.event_name == 'pull_request' && github.event.pull_request.head.sha || github.sha }}"
      echo "HASH=${HASH}" | tee -a ${GITHUB_ENV}

  - name: "Build and push ${{ inputs.image }} image"
    id: docker-push-action
    uses: docker/build-push-action@v5.1.0
    with:
      push: ${{ inputs.push }}
      # Tag with branch name and tag, the variable to get the branch name differs if we are in a pull_request or push event
      tags: ${{ env.DOCKER_REPO }}/${{ inputs.image }}:${{ env.SANITIZED_BRANCH_NAME }},${{ env.DOCKER_REPO }}/${{ inputs.image }}:${{ env.HASH }}
      context: ${{ inputs.context }}

  - name: Sign image with a kms key
    shell: bash
    run: cosign sign --tlog-upload=false --key gcpkms://${{ inputs.COSIGN_KMS_KEY }} ${{ env.DOCKER_REPO }}/${{ inputs.image }}@${{ steps.docker-push-action.outputs.digest }}
