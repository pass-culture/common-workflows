name: 'Render and push manifests'
description: 'This composite action executes helm template and push results to the render-manifests repository'
inputs:
  environment:
    type: string
    required: true
  app_name:
    type: string
    required: true
  app_version:
    type: string
    required: false
  additional_args:
    description: "Optional helm parameter value"
    type: string
    required: false
  api_token_github_secret_name:
    type: string
    required: true
  registry_workload_identity_secret_name:
    type: string
    required: true
  registry_service_account_secret_name:
    type: string
    required: true
  chart_values_repository:
    description: "Repository containing helm chart values. Optional if called from a values repository"
    type: string
    required: false
  chart_values_repository_ref:
    description: "Repository ref containing helm chart values"
    type: string
    required: false    
    default: ''
  helmfile_path:
    description: "Location of helmfile.yaml inside repository"
    type: string
    required: false
    default: "."
  rendered_manifests_target_branch:
    description: "Target branch for rendered-manifests. Mainly used for pullrequests and testing purposes, Use with caution."
    type: string
    required: false
    default: ''
  is_pull_request:
    description: "Boolean wether it is from a pullrequest or not"
    type: boolean
    required: false
    default: false

runs:
  using: 'composite'
  steps:
    - name: "Get secrets (artifact registry, github)"
      id: 'get-secrets'
      uses: 'google-github-actions/get-secretmanager-secrets@v2'
      with:
        secrets: |-
          ARTIFACT_REGISTRY_WORKLOAD_IDENTITY_PROVIDER:${{ inputs.registry_workload_identity_secret_name }}
          ARTIFACT_REGISTRY_SERVICE_ACCOUNT:${{ inputs.registry_service_account_secret_name }}
          API_TOKEN_GITHUB:${{ inputs.api_token_github_secret_name }}

    - name: "Connect to docker registry"
      id: "connect-registry"
      uses: 'google-github-actions/auth@v2'
      with:
        create_credentials_file: false
        token_format: 'access_token'
        workload_identity_provider: ${{ steps.get-secrets.outputs.ARTIFACT_REGISTRY_WORKLOAD_IDENTITY_PROVIDER }}
        service_account: ${{ steps.get-secrets.outputs.ARTIFACT_REGISTRY_SERVICE_ACCOUNT }}

    - uses: actions/checkout@v4.1.5
      if: inputs.chart_values_repository != ''
      with:
        repository: ${{ inputs.chart_values_repository }}
        token: ${{ steps.get-secrets.outputs.API_TOKEN_GITHUB }}
        ref: ${{ inputs.chart_values_repository_ref }}

    - name: "Setup helmfile"
      uses: mamezou-tech/setup-helmfile@v1.3.0
      with:
        helmfile-version: "v0.147.0"

    - name: "Render manifests"
      shell: bash
      run: |
        helmfile_template=(helmfile -f ${{ inputs.helmfile_path }}/helmfile.yaml -e $ENVIRONMENT template --output-dir ${{ runner.temp }}/rendered-manifests/
        if [ "${ADDITIONAL_ARGS}" ]
        then
          helmfile_template+=(--set $ADDITIONAL_ARGS)
        fi
        if [ "${APP_VERSION}" ]; then
          helmfile_template+=(--set image.tag=$APP_VERSION)
        fi
        "${helmfile_template[@]}"
        if [ ${{ inputs.is_pull_request }} = true ]; then
          mkdir -p ${{ runner.temp }}/rendered-manifests/pcapi/pullrequests/pr-${{ github.event.pull_request.number }}
          echo "----"
          ls ${{ runner.temp }}/rendered-manifests
          echo "----"
          ls ${{ runner.temp }}/rendered-manifests/pcapi
          mv ${{ runner.temp }}/rendered-manifests/pcapi/templates ${{ runner.temp }}/rendered-manifests/pcapi/pullrequests/pr-${{ github.event.pull_request.number }}
        fi
      env:
        ENVIRONMENT: ${{ inputs.environment }}
        APP_NAME: ${{ inputs.app_name }}
        APP_VERSION: ${{ inputs.app_version }}
        ADDITIONAL_ARGS: ${{ inputs.additional_args }}
        PASSCULTURE_USERNAME: "oauth2accesstoken"
        PASSCULTURE_PASSWORD: ${{ steps.connect-registry.outputs.access_token }}

    - name: 'Set destination branch'
      shell: bash
      id: 'compute-branch-name'
      run: |
        if [ -z "${{ inputs.rendered_manifests_target_branch }}" ]; then
          echo "destination_branch=${{ inputs.app_name }}/${{ inputs.environment }}" | tee -a ${GITHUB_OUTPUT}
        else
          echo "destination_branch=${{ inputs.rendered_manifests_target_branch }}" | tee -a ${GITHUB_OUTPUT}
        fi

    - name: "Push manifests to rendered-manifests repository"
      id: push-manifests
      uses: cpina/github-action-push-to-another-repository@main
      env:
        API_TOKEN_GITHUB: ${{ steps.get-secrets.outputs.API_TOKEN_GITHUB }}
      with:
        source-directory: ${{ runner.temp }}/rendered-manifests/
        destination-github-username: 'pass-culture'
        destination-repository-name: 'rendered-manifests'
        commit-message: "${{ inputs.app_name }}(${{ inputs.environment }}) : manifests for app_version=${{ inputs.app_version }}"
        target-branch: "${{ steps.compute-branch-name.outputs.destination_branch }}"
        create-target-branch-if-needed: true
