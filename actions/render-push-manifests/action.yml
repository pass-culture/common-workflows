name: 'Render and push manifests'
description: 'This composite action executes helm template and push results to the render-manifests repository'
inputs:
  environment:
    type: string
    required: true
  app_name:
    type: string
    required: true
  app_version:
    type: string
    required: false
  additional_args:
    description: "Optional helm parameter value"
    type: string
    required: false
  api_token_github_secret_name:
    type: string
    required: true
  registry_workload_identity_secret_name:
    type: string
    required: true
  registry_service_account_secret_name:
    type: string
    required: true
  chart_values_repository:
    description: "Repository containing helm chart values. Optional if called from a values repository"
    type: string
    required: false
  chart_values_repository_ref:
    description: "Repository ref containing helm chart values"
    type: string
    required: false    
    default: ''
  helmfile_path:
    description: "Location of helmfile.yaml inside repository"
    type: string
    required: false
    default: "."
  rendered_manifests_target_branch:
    description: "Target branch for rendered-manifests. Mainly used for pullrequests and testing purposes, Use with caution."
    type: string
    required: false
    default: ''
  push_manifests:
    description: "Push manifests to target_branch"
    type: boolean
    default: true
  scan_manifests:
    description: "Perform trivy IaC analysis of rendered manifests"
    type: boolean
    default: false
  diff:
    description: "Perform diff operation and report back to PR (must be used with PR events)"
    type: boolean
    default: false
  is_pull_request:
    description: "Boolean wether it is from a pullrequest or not"
    type: boolean
    required: false
  setup_helmfile:
    description: "Set to false if calling this action several times within a single job"
    type: boolean
    default: true

runs:
  using: 'composite'
  steps:
    - name: "Get secrets (artifact registry, github)"
      id: 'get-secrets'
      uses: 'google-github-actions/get-secretmanager-secrets@v2'
      with:
        secrets: |-
          ARTIFACT_REGISTRY_WORKLOAD_IDENTITY_PROVIDER:${{ inputs.registry_workload_identity_secret_name }}
          ARTIFACT_REGISTRY_SERVICE_ACCOUNT:${{ inputs.registry_service_account_secret_name }}
          API_TOKEN_GITHUB:${{ inputs.api_token_github_secret_name }}

    - name: "Connect to docker registry"
      id: "connect-registry"
      uses: 'google-github-actions/auth@v2'
      with:
        create_credentials_file: false
        token_format: 'access_token'
        workload_identity_provider: ${{ steps.get-secrets.outputs.ARTIFACT_REGISTRY_WORKLOAD_IDENTITY_PROVIDER }}
        service_account: ${{ steps.get-secrets.outputs.ARTIFACT_REGISTRY_SERVICE_ACCOUNT }}

    - uses: actions/checkout@v4.1.5
      if: inputs.chart_values_repository != ''
      with:
        repository: ${{ inputs.chart_values_repository }}
        token: ${{ steps.get-secrets.outputs.API_TOKEN_GITHUB }}
        ref: ${{ inputs.chart_values_repository_ref }}

    - name: "Setup helmfile"
      uses: mamezou-tech/setup-helmfile@v2.0.0
      if: ${{ inputs.setup_helmfile == 'true' }}
      with:
        helmfile-version: "v0.147.0"

    - name: "Render manifests"
      shell: bash
      run: |
        output_dir_tpl=""
        if [ ${{ inputs.is_pull_request }} = true ]; then
          output_dir_tpl="${{ github.workspace }}/rendered-manifests/pcapi-pr-${{ github.event.pull_request.number }}"
        else
          output_dir_tpl="{{ .OutputDir }}"
        fi
        helmfile_template=(helmfile -f ${{ inputs.helmfile_path }}/helmfile.yaml -e $ENVIRONMENT template --output-dir ${{ github.workspace }}/rendered-manifests/ --output-dir-template $output_dir_tpl)
        if [ "${ADDITIONAL_ARGS}" ]; then
          helmfile_template+=(--set $ADDITIONAL_ARGS)
        fi
        # To be verified : only sent with PR, could be simplified with is_pull_request var
        if [ "${APP_VERSION}" ]; then
          helmfile_template+=(--state-values-set pcapi.image.tag=$APP_VERSION)
        fi
        #Pass pr number to helmfile argument
        if [ ${{ inputs.is_pull_request }} = true ]; then
          helmfile_template+=(--state-values-set prId=${{ github.event.pull_request.number }})
        fi
        "${helmfile_template[@]}"
        # Get rid of pcapi/templates for pullrequests (for argocd appset path)
        if [ ${{ inputs.is_pull_request }} = true ]; then
          mv $output_dir_tpl/pcapi/templates/*.yaml $output_dir_tpl
          #Move redis and pgsql rendered manifests to their respective root folders
          mkdir ${{ github.workspace }}/rendered-manifests/redis-pr-${{ github.event.pull_request.number }}
          mkdir ${{ github.workspace }}/rendered-manifests/postgresql-pr-${{ github.event.pull_request.number }}
          mv $output_dir_tpl/redis/templates/* ${{ github.workspace }}/rendered-manifests/redis-pr-${{ github.event.pull_request.number }}
          mv $output_dir_tpl/postgresql/templates/* ${{ github.workspace }}/rendered-manifests/postgresql-pr-${{ github.event.pull_request.number }}
        fi
      env:
        ENVIRONMENT: ${{ inputs.environment }}
        APP_NAME: ${{ inputs.app_name }}
        APP_VERSION: ${{ inputs.app_version }}
        ADDITIONAL_ARGS: ${{ inputs.additional_args }}
        PASSCULTURE_USERNAME: "oauth2accesstoken"
        PASSCULTURE_PASSWORD: ${{ steps.connect-registry.outputs.access_token }}

    - name: "Scan generated manifests"
      id: scan-manifests
      if: ${{ inputs.scan_manifests == 'true' }}
      uses: aquasecurity/trivy-action@0.24.0
      with:
        scan-type: config
        hide-progress: true
        format: table
        output: scan_output.txt
        severity: 'CRITICAL,HIGH'

    - name: 'Set destination branch'
      shell: bash
      if: ${{ inputs.push_manifests == 'true' }}
      id: 'compute-branch-name'
      run: |
        if [ -z "${{ inputs.rendered_manifests_target_branch }}" ]; then
          echo "destination_branch=${{ inputs.app_name }}/${{ inputs.environment }}" | tee -a ${GITHUB_OUTPUT}
        else
          echo "destination_branch=${{ inputs.rendered_manifests_target_branch }}" | tee -a ${GITHUB_OUTPUT}
        fi

    # Diff operation
    - name: 'Checkout current rendered-manifests branch'
      uses: actions/checkout@v4
      if: ${{ inputs.diff == 'true' }}
      with:
        repository: pass-culture/rendered-manifests
        path: current-rendered-manifests
        token: ${{ steps.get-secrets.outputs.API_TOKEN_GITHUB }}
        ref: "${{ steps.compute-branch-name.outputs.destination_branch }}"

    - name: 'Diff'
      if: ${{ inputs.diff == 'true' }}
      shell: bash
      id: 'diff'
      run: |
        diff -r -u ${{ inputs.helmfile_path }}/rendered-manifests current-rendered-manifests | tee diff_output.txt || true 
  
    - name: 'Concat outputs'
      if: ${{ inputs.diff == 'true' }}
      shell: bash
      run: |
        echo "### Scan result" >> output.txt
        echo "<details>" >> output.txt
        cat scan_output.txt >> output.txt
        echo "</details>" >> output.txt
        echo "" >> output.txt
        echo "### Diff result" >> output.txt
        echo "<details>" >> output.txt
        echo "" >> output.txt
        echo "\`\`\`diff" >> output.txt
        echo "" >> output.txt
        cat diff_output.txt >> output.txt
        echo "" >> output.txt
        echo "\`\`\`" >> output.txt
        echo "" >> output.txt
        echo "</details>" >> output.txt

    - name: 'Post output to PR'
      if: ${{ inputs.diff == 'true' }}
      uses: thollander/actions-comment-pull-request@v2
      with:
        filepath: output.txt


    # Push manifests
    - name: "Push manifests to rendered-manifests repository"
      id: push-manifests
      if: ${{ inputs.push_manifests == 'true' }}
      uses: cpina/github-action-push-to-another-repository@main
      env:
        API_TOKEN_GITHUB: ${{ steps.get-secrets.outputs.API_TOKEN_GITHUB }}
      with:
        source-directory: ./rendered-manifests/
        destination-github-username: 'pass-culture'
        destination-repository-name: 'rendered-manifests'
        commit-message: "${{ inputs.app_name }}(${{ inputs.environment }}) : manifests for app_version=${{ inputs.app_version }}"
        target-branch: "${{ steps.compute-branch-name.outputs.destination_branch }}"
        create-target-branch-if-needed: true
