name: Build a Docker image

on:
  workflow_call:
    inputs:
      image:
        required: true
        type: string
      push:
        default: false
        type: boolean
      context:
        type: string
        default: .
    secrets:
      GCP_WORKLOAD_IDENTITY_PROVIDER:
        required: true
      ARTIFACT_REGISTRY_SERVICE_ACCOUNT:
        required: true

env:
  DOCKER_REGISTRY_PROJECT_ID: passculture-infra-prod
  DOCKER_REGISTRY_REGION: europe-west1
  DOCKER_REGISTRY_REPOSITORY: pass-culture-artifact-registry

jobs:
  build-image:
    runs-on: ubuntu-latest
    permissions:
      id-token: write
      contents: write
    steps:
      - name: Checkout ref
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2.2.1
        with:
          driver: docker

      - name: Output variables
        id: vars
        run: echo "DOCKER_REPO=${DOCKER_REGISTRY_REGION}-docker.pkg.dev/${DOCKER_REGISTRY_PROJECT_ID}/${DOCKER_REGISTRY_REPOSITORY}" | tee -a ${GITHUB_ENV}
      - name: Authentification to Google to get secret
        uses: 'google-github-actions/auth@v2'
        with:
          workload_identity_provider: ${{ secrets.GCP_EHP_WORKLOAD_IDENTITY_PROVIDER }}
          service_account: ${{ secrets.GCP_EHP_SERVICE_ACCOUNT }}
      - name: Get Secret
        id: 'secrets'
        uses: 'google-github-actions/get-secretmanager-secrets@v2'
        with:
          secrets: |-
            COSIGN_KMS_KEY:passculture-metier-ehp/cosign_kms_key
      - id: openid-auth
        name: "OpenID Connect Authentication"
        uses: "google-github-actions/auth@v2"
        with:
          create_credentials_file: false
          token_format: "access_token"
          workload_identity_provider: ${{ secrets.GCP_WORKLOAD_IDENTITY_PROVIDER }}
          service_account: ${{ secrets.ARTIFACT_REGISTRY_SERVICE_ACCOUNT }}

      - id: docker-login
        uses: docker/login-action@v3.0.0
        name: "Docker login"
        with:
          registry: "${{ env.DOCKER_REGISTRY_REGION }}-docker.pkg.dev"
          username: "oauth2accesstoken"
          password: "${{ steps.openid-auth.outputs.access_token }}"
      - name: Install Cosign
        uses: sigstore/cosign-installer@v3.5.0
      # Convert / in branch name to -
      - name: Sanitze branch name
        id: sanitize-branch-name
        run: |
          BRANCH_NAME="${{ github.event_name == 'pull_request' && github.head_ref || github.ref_name }}"
          echo "SANITIZED_BRANCH_NAME=${BRANCH_NAME//\//-}" | tee -a ${GITHUB_ENV}
      - name: Get commit hash
        id: get-commit-hash
        run: |
          HASH="${{ github.event_name == 'pull_request' && github.event.pull_request.head.sha || github.sha }}"
          echo "HASH=${HASH}" | tee -a ${GITHUB_ENV}
      - name: "Build and push ${{ inputs.image }} image"
        id: docker-push-action
        uses: docker/build-push-action@v5.1.0
        with:
          push: ${{ inputs.push }}
          # Tag with branch name and tag, the variable to get the branch name differs if we are in a pull_request or push event
          tags: ${{ env.DOCKER_REPO }}/${{ inputs.image }}:${{ env.SANITIZED_BRANCH_NAME }},${{ env.DOCKER_REPO }}/${{ inputs.image }}:${{ env.HASH }}
          context: ${{ inputs.context }}
      - name: Sign image with a kms key
        run: cosign sign --tlog-upload=false --key gcpkms://${{ steps.secrets.outputs.COSIGN_KMS_KEY }} ${{ env.DOCKER_REPO }}/${{ inputs.image }}@${{ steps.docker-push-action.outputs.digest }}
